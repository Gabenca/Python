
###############################################################################
#              LABORANALYSIS DOCKERFILE (analyze application)                 #
#          Special thanks to Miguel Grinberg (miguelgrinberg.com)             #
#              for excellent dockerfile commands explanation                  #
###############################################################################
#  This is CONTAINER version, intended for deploying to DOCKER environment!   #
###############################################################################

# Each line in the Dockerfile is a command.
# The 'FROM' command specifies the base container image on which the new image
# will be built. The idea is that you start from an existing image,
# add or change some things, and you end up with a derived image.
# Images are referenced by a name and a tag, separated by a colon.
# The tag is used as a versioning mechanism, allowing a container image
# to provide more than one variant. The name of image is python,
# which is the official Docker image for Python. The tags for this image
# allow you to specify the interpreter version and base operating system.
# The 3.8-slim-buster tag selects a Python 3.8 interpreter
# installed on lightweight version of Debian 10 (Buster) Linux.
FROM python:3.8-slim-buster

# The 'RUN' command executes an arbitrary command in the context
# of the container. This would be similar to you typing the command 
# in a shell prompt. The 'adduser laboranalysis' command creates a new user
# named 'laboranalysis'. The 'mkdir' command creates appropriate directory
# in container filesystem in which xlsx reports will be stored. 
RUN adduser laboranalysis
RUN mkdir -p /var/laboranalysis/reports

# The 'WORKDIR' command sets a default directory where the application
# is going to be installed. When the 'laboranalysis' account was created,
# a home directory for this account was created too, now make that directory
# the default. The new default directory is going to apply
# to any remaining commands in the Dockerfile, and also later
# when the container is executed.
WORKDIR /home/laboranalysis

# The 'COPY' command transfers files from host machine to the container
# file system. The source file(s) must be relative to the directory
# where the Dockerfile is located. The destination can be an absolute path,
# or a path relative to the directory that was set
# in a previous 'WORKDIR' command.
COPY requirements.txt ./

# The 'RUN' pip install command installs python modules listed in 
# requirements.txt file. --no-cache-dir flag provide thin installation
# which prevents docker image overgrowth.
RUN pip install --no-cache-dir -r requirements.txt

# Copy our application distro files to container
COPY laboranalysis laboranalysis

# Set new default location
WORKDIR /home/laboranalysis/laboranalysis

# The 'RUN' chown command that follows sets the owner of all the directories
# and files that were stored in /home/laboranalysis as the new
# laboranalysis user. Even though I created this user near the top
# of the Dockerfile, the default user for all the commands remained root,
# so all these files need to be switched to the laboranalysis user
# so that this user can work with them when the container is started.
RUN chown -R laboranalysis:laboranalysis ./

# The 'USER' command in the next line makes this new laboranalysis user the default
# for any subsequent instructions, and also for when the container is started.
USER laboranalysis

# Finally, the 'ENTRYPOINT' command defines the default command
# that should be executed when the container is started.
# This is the command that will start the python interpreter.
ENTRYPOINT ["python"]
# In 'CMD' we provide main application file.
CMD ["analyze.py"]
